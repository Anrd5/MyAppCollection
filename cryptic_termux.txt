#!/usr/bin/env bash
# install_cryptics_daemon.sh
# Installer + daemon for downloading and silently installing APKs on Android (Termux).
set -u

# ----------------- Configuration -----------------
WORKDIR="${WORKDIR:-$HOME/cryptic_apks}"
KEEP_APKS="${KEEP_APKS:-0}"
POLL_INTERVAL="${POLL_INTERVAL:-30}"
TRIGGER_URL="${TRIGGER_URL:-https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/RefreshClones.txt}"
STATE_FILE="${WORKDIR}/.last_refresh_state"
PIDFILE_DEFAULT="${WORKDIR}/cryptic_daemon.pid"
LOGFILE_DEFAULT="${HOME}/cryptic_daemon.log"

LINKS=(
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.0.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.1.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.2.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.3.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.4.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.5.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.6.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.7.apk"
)

# ----------------- CLI Parsing -----------------
DAEMONIZE=0
TEST_MODE=0
PIDFILE=""
LOGFILE=""

usage() {
  cat <<EOF
Usage: $0 [OPTIONS]

Options:
  --daemonize           Run as background daemon
  --pidfile <path>      PID file (default: ${PIDFILE_DEFAULT})
  --logfile <path>      Log file (default: ${LOGFILE_DEFAULT})
  --test                Test mode: download & install first APK only
  --help                Show this help

Environment:
  WORKDIR, KEEP_APKS, POLL_INTERVAL, TRIGGER_URL

Examples:
  $0 --test
  $0 --daemonize
  POLL_INTERVAL=10 KEEP_APKS=1 $0 --daemonize --logfile /sdcard/cryptic_log.txt
EOF
}

i=1
while [ $i -le $# ]; do
  arg="${!i}"
  case "$arg" in
    --daemonize) DAEMONIZE=1 ;;
    --pidfile) i=$((i+1)); PIDFILE="${!i:-}";;
    --logfile) i=$((i+1)); LOGFILE="${!i:-}";;
    --test) TEST_MODE=1 ;;
    --help|-h) usage; exit 0 ;;
    *) echo "Unknown option: $arg"; usage; exit 1 ;;
  esac
  i=$((i+1))
done

PIDFILE="${PIDFILE:-$PIDFILE_DEFAULT}"
LOGFILE="${LOGFILE:-$LOGFILE_DEFAULT}"

# ----------------- Setup -----------------
mkdir -p "$WORKDIR"
cd "$WORKDIR" || { echo "ERROR: cannot cd to $WORKDIR"; exit 1; }

log() { printf '[%s] %s\n' "$(date --iso-8601=seconds 2>/dev/null || date)" "$*"; }

ANDROID_VERSION="$(getprop ro.build.version.release 2>/dev/null || echo 'Unknown')"
log "Detected Android version: $ANDROID_VERSION"

if [ ! -d "$HOME/storage" ]; then
  log "Termux storage not initialized. Run: termux-setup-storage"
fi

# ----------------- Daemonize -----------------
if [ "$DAEMONIZE" = 1 ]; then
  if [ -f "$PIDFILE" ]; then
    oldpid="$(cat "$PIDFILE" 2>/dev/null || true)"
    if [ -n "$oldpid" ] && kill -0 "$oldpid" 2>/dev/null; then
      echo "Daemon already running (PID $oldpid). Exiting."
      exit 0
    else
      rm -f "$PIDFILE" 2>/dev/null || true
    fi
  fi
  mkdir -p "$(dirname "$LOGFILE")" 2>/dev/null || true
  nohup "$0" --pidfile "$PIDFILE" --logfile "$LOGFILE" > "$LOGFILE" 2>&1 &
  childpid=$!
  echo "$childpid" > "$PIDFILE"
  echo "Started daemon (PID $childpid). Log: $LOGFILE"
  exit 0
fi

printf '%s' "$$" > "$PIDFILE" 2>/dev/null || true
trap 'if [ -f "$PIDFILE" ] && [ "$(cat "$PIDFILE" 2>/dev/null)" = "$$" ]; then rm -f "$PIDFILE"; fi; log "Exiting"; exit 0' SIGINT SIGTERM EXIT

# ----------------- Downloader -----------------
DL_TOOL=""
if command -v wget >/dev/null 2>&1; then
  DL_TOOL="wget"
elif command -v curl >/dev/null 2>&1; then
  DL_TOOL="curl"
else
  log "No wget/curl found. Attempting to install wget..."
  pkg update -y >/dev/null 2>&1 || true
  pkg install -y wget >/dev/null 2>&1 || true
  DL_TOOL="$(command -v wget >/dev/null 2>&1 && echo wget || command -v curl >/dev/null 2>&1 && echo curl)"
  [ -z "$DL_TOOL" ] && log "Failed to install downloader." && exit 1
fi
log "Using downloader: $DL_TOOL"

# ----------------- Root Detection -----------------
ROOT_CMD=""
if command -v tsu >/dev/null 2>&1; then
  ROOT_CMD="tsu --"
elif command -v su >/dev/null 2>&1; then
  ROOT_CMD="su -c"
elif command -v magisk >/dev/null 2>&1; then
  ROOT_CMD="magisk su -c"
else
  log "No root helper (tsu, su, magisk) found. Script requires root."
  exit 1
fi
log "Using root command: ${ROOT_CMD%% *}"

# ----------------- Functions -----------------
download_file() {
  local url="$1"
  local out="$2"
  if [ "$DL_TOOL" = "wget" ]; then
    wget -c -O "$out" "$url"
  else
    curl -L -C - -o "$out" "$url"
  fi
}

install_apk_root() {
  local apk_path="$1"
  if command -v tsu >/dev/null 2>&1; then
    tsu pm install -r -g "$apk_path"
  elif command -v magisk >/dev/null 2>&1; then
    magisk su -c "pm install -r -g '$apk_path'"
  else
    su -c "pm install -r -g '$apk_path'"
  fi

  local rc=$?
  if [ $rc -ne 0 ]; then
    log "Silent install failed. Try manual install: adb install \"$apk_path\""
  fi
  return $rc
}

get_remote_flag() {
  local content=""
  if [ "$DL_TOOL" = "wget" ]; then
    content="$(wget -qO- "$TRIGGER_URL" 2>/dev/null || true)"
  else
    content="$(curl -fsSL "$TRIGGER_URL" 2>/dev/null || true)"
  fi
  content="$(printf '%s' "$content" | tr -d ' \t\r\n' | cut -c1 || true)"
  case "$content" in
    0|1) printf '%s' "$content" ;;
    *) printf '' ;;
  esac
}

do_downloads_and_installs() {
  log "Starting downloads and installs into $WORKDIR"
  for url in "${LINKS[@]}"; do
    fname="${url##*/}"
    log "Processing: $fname"
    [ -f "$fname" ] && [ ! -s "$fname" ] && rm -f "$fname"

    log "Downloading: $url"
    download_file "$url" "$fname"
    [ $? -ne 0 ] && log "Download failed for $fname" && continue
    [ ! -s "$fname" ] && log "Empty file. Skipping $fname." && continue

    size_bytes=$(stat -c%s "$fname" 2>/dev/null || ls -l "$fname" | awk '{print $5}')
    log "Downloaded $fname (${size_bytes} bytes). Installing..."
    install_apk_root "$PWD/$fname"
    if [ $? -eq 0 ]; then
      log "Installed $fname successfully."
      [ "$KEEP_APKS" = "0" ] && rm -f "$fname" || log "Keeping $fname (KEEP_APKS=1)"
    else
      log "Install failed for $fname. File kept for debugging."
    fi
  done
  log "All tasks finished."
}

# -----------------
