cat > ~/fetch_and_inspect_cryptic.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
OUTDIR="$HOME/cryptic_inspect"
OUTFILE="$OUTDIR/cryptic_termux.sh"
REMOTE1="https://raw.githubusercontent.com/Anrd5/MyAppCollection/main/cryptic_termux.txt"

mkdir -p "$OUTDIR"
rm -f "$OUTFILE"

echo "Attempt 1: curl (normal)"
if curl -fsSL -o "$OUTFILE" "$REMOTE1"; then
  echo "Downloaded via curl -> $OUTFILE"
else
  echo "curl normal failed. Trying curl forced IPv4..."
  if curl -4 -fsSL -o "$OUTFILE" "$REMOTE1"; then
    echo "Downloaded via curl -4 -> $OUTFILE"
  else
    echo "curl -4 failed. Trying wget..."
    if command -v wget >/dev/null 2>&1 && wget -qO "$OUTFILE" "$REMOTE1"; then
      echo "Downloaded via wget -> $OUTFILE"
    else
      echo "wget failed or not present. Trying git clone (shallow) as fallback..."
      TMPDIR="$(mktemp -d)"
      if command -v git >/dev/null 2>&1 && git -c http.sslVerify=false clone --depth 1 https://github.com/Anrd5/MyAppCollection "$TMPDIR" >/dev/null 2>&1; then
        if [ -f "$TMPDIR/cryptic_termux.txt" ]; then
          cp "$TMPDIR/cryptic_termux.txt" "$OUTFILE"
          echo "Got file from git clone -> $OUTFILE"
        fi
      fi
      rm -rf "$TMPDIR" || true
    fi
  fi
fi

if [ ! -f "$OUTFILE" ] || [ ! -s "$OUTFILE" ]; then
  echo "All network fetch attempts failed. Writing a local copy from the installer text you provided earlier..."
  cat > "$OUTFILE" <<'SCRIPT'
#!/usr/bin/env bash
# install_cryptics_daemon.sh
# Single-file: one-shot installer + continuous daemon that polls a remote trigger file.
# Includes: original 8 APK links, resume downloads, silent root installs (tsu/su),
#          KEEP_APKS support, --test, --daemonize, --pidfile, --logfile, --help.
set -u

# ----------------- Configuration (can be overridden with env vars) -----------------
WORKDIR="${WORKDIR:-$HOME/cryptic_apks}"
KEEP_APKS="${KEEP_APKS:-0}"   # set KEEP_APKS=1 to keep apk files
POLL_INTERVAL="${POLL_INTERVAL:-30}"   # seconds between trigger checks
TRIGGER_URL="${TRIGGER_URL:-https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/RefreshClones.txt}"
STATE_FILE="${WORKDIR}/.last_refresh_state"
PIDFILE_DEFAULT="${WORKDIR}/cryptic_daemon.pid"
LOGFILE_DEFAULT="${HOME}/cryptic_daemon.log"

# ----------------- The APK links (unchanged from your original) -----------------
LINKS=(
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.0.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.1.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.2.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.3.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.4.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.5.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.6.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.7.apk"
)

# ----------------- CLI parsing -----------------
DAEMONIZE=0
TEST_MODE=0
PIDFILE=""
LOGFILE=""

usage() {
  cat <<EOF
Usage: $0 [OPTIONS]

Options:
  --daemonize           Run as background daemon (uses nohup, writes PID & log)
  --pidfile <path>      Specify PID file (default: ${PIDFILE_DEFAULT})
  --logfile <path>      Specify logfile (default: ${LOGFILE_DEFAULT})
  --test                Test mode: download & install only the first APK once, then exit
  --help                Show this help and exit

Environment variables:
  WORKDIR, KEEP_APKS, POLL_INTERVAL, TRIGGER_URL

Examples:
  $0 --test
  $0 --daemonize
  POLL_INTERVAL=10 KEEP_APKS=1 $0 --daemonize --logfile /sdcard/cryptic_log.txt
EOF
}

# Simple args loop
i=1
while [ $i -le $# ]; do
  arg="${!i}"
  case "$arg" in
    --daemonize) DAEMONIZE=1 ;;
    --pidfile) i=$((i+1)); PIDFILE="${!i:-}";;
    --logfile) i=$((i+1)); LOGFILE="${!i:-}";;
    --test) TEST_MODE=1 ;;
    --help|-h) usage; exit 0 ;;
    *) echo "Unknown option: $arg"; usage; exit 1 ;;
  esac
  i=$((i+1))
done

PIDFILE="${PIDFILE:-$PIDFILE_DEFAULT}"
LOGFILE="${LOGFILE:-$LOGFILE_DEFAULT}"

# ----------------- Helpers -----------------
mkdir -p "$WORKDIR"
cd "$WORKDIR" || { echo "ERROR: cannot cd to $WORKDIR"; exit 1; }

log() { printf '[%s] %s\n' "$(date --iso-8601=seconds 2>/dev/null || date)" "$*"; }

# Daemonize: parent launches child with nohup and exits (child gets --child)
if [ "$DAEMONIZE" = 1 ]; then
  # If already running, exit
  if [ -f "$PIDFILE" ]; then
    oldpid="$(cat "$PIDFILE" 2>/dev/null || true)"
    if [ -n "$oldpid" ] && kill -0 "$oldpid" 2>/dev/null; then
      echo "Daemon already running (PID $oldpid). Exiting."
      exit 0
    else
      rm -f "$PIDFILE" 2>/dev/null || true
    fi
  fi
  # Re-launch self with nohup into log
  mkdir -p "$(dirname "$LOGFILE")" 2>/dev/null || true
  nohup "$0" --pidfile "$PIDFILE" --logfile "$LOGFILE" > "$LOGFILE" 2>&1 &
  childpid=$!
  echo "$childpid" > "$PIDFILE"
  echo "Started daemon (PID $childpid). Log: $LOGFILE  PID: $PIDFILE"
  exit 0
fi

# If running (foreground/child) write PID file
printf '%s' "$$" > "$PIDFILE" 2>/dev/null || true
trap 'if [ -f "$PIDFILE" ] && [ "$(cat "$PIDFILE" 2>/dev/null)" = "$$" ]; then rm -f "$PIDFILE"; fi; log "Exiting"; exit 0' SIGINT SIGTERM EXIT

# ----------------- Downloader selection -----------------
DL_TOOL=""
if command -v wget >/dev/null 2>&1; then
  DL_TOOL="wget"
elif command -v curl >/dev/null 2>&1; then
  DL_TOOL="curl"
else
  log "No wget/curl found. Attempting to install wget via pkg..."
  pkg update -y >/dev/null 2>&1 || true
  pkg install -y wget >/dev/null 2>&1 || true
  if command -v wget >/dev/null 2>&1; then
    DL_TOOL="wget"
  elif command -v curl >/dev/null 2>&1; then
    DL_TOOL="curl"
  else
    log "Failed to obtain wget/curl. Install one and re-run."
    exit 1
  fi
fi
log "Using downloader: $DL_TOOL"

# ----------------- Root helper -----------------
ROOT_CMD=""
if command -v tsu >/dev/null 2>&1; then
  ROOT_CMD="tsu --"
elif command -v su >/dev/null 2>&1; then
  ROOT_CMD="su -c"
else
  log "No root helper (tsu or su) found. Script requires root to install silently."
  log "Install tsu (pkg install tsu) or ensure su is available, then re-run."
  exit 1
fi
log "Using root command: ${ROOT_CMD%% *}"

# ----------------- Core functions (kept from your original) -----------------
download_file() {
  local url="$1"
  local out="$2"
  if [ "$DL_TOOL" = "wget" ]; then
    wget -c -O "$out" "$url"
    return $?
  else
    curl -L -C - -o "$out" "$url"
    return $?
  fi
}

install_apk_root() {
  local apk_path="$1"
  if command -v tsu >/dev/null 2>&1; then
    tsu pm install -r -g "$apk_path"
    return $?
  else
    su -c "pm install -r -g '$apk_path'"
    return $?
  fi
}

# ----------------- Trigger fetch -----------------
get_remote_flag() {
  local content=""
  if [ "$DL_TOOL" = "wget" ]; then
    content="$(wget -qO- "$TRIGGER_URL" 2>/dev/null || true)"
  else
    content="$(curl -fsSL "$TRIGGER_URL" 2>/dev/null || true)"
  fi
  content="$(printf '%s' "$content" | tr -d ' \t\r\n' | cut -c1 || true)"
  case "$content" in
    0|1) printf '%s' "$content" ;;
    *) printf '' ;;
  esac
}

# ----------------- One run (the original loop) -----------------
do_downloads_and_installs() {
  log "Starting downloads and installs into $WORKDIR"
  log "----"
  for url in "${LINKS[@]}"; do
    fname="${url##*/}"
    log "Processing: $fname"
    if [ -f "$fname" ] && [ ! -s "$fname" ]; then
      log "Removing zero-size stale file $fname"
      rm -f "$fname"
    fi

    log "Downloading from: $url"
    download_file "$url" "$fname"
    dlrc=$?
    if [ $dlrc -ne 0 ]; then
      log "Error: download failed for $fname (code $dlrc). Skipping."
      continue
    fi

    if [ ! -s "$fname" ]; then
      log "Downloaded file is empty. Skipping install for $fname."
      continue
    fi

    size_bytes=$(stat -c%s "$fname" 2>/dev/null || ls -l "$fname" | awk '{print $5}')
    log "Downloaded $fname (${size_bytes} bytes). Installing..."
    install_apk_root "$PWD/$fname"
    inst_rc=$?
    if [ $inst_rc -eq 0 ]; then
      log "Installed $fname successfully."
      if [ "$KEEP_APKS" = "0" ]; then
        log "Removing $fname to save space..."
        rm -f "$fname"
      else
        log "Keeping $fname as requested (KEEP_APKS=1)."
      fi
    else
      log "Warning: installation failed for $fname (pm install exit $inst_rc). File kept for debugging."
    fi
  done
  log "All tasks finished. Workdir: $WORKDIR"
}

# ----------------- TEST mode: one-shot first APK -----------------
if [ "$TEST_MODE" = 1 ]; then
  log "TEST MODE: only downloading + installing the first APK once."
  if [ ${#LINKS[@]} -gt 0 ]; then
    first="${LINKS[0]}"
    LINKS=("$first")
  fi
  do_downloads_and_installs
  exit 0
fi

# ----------------- Daemon loop: watch trigger and run on 0->1 transition -----------------
last_state=""
if [ -f "$STATE_FILE" ]; then
  last_state="$(cat "$STATE_FILE" 2>/dev/null || true)"
fi
last_state="${last_state:-}"

log "Daemon starting. Polling $TRIGGER_URL every ${POLL_INTERVAL}s. Initial last_state='$last_state'. Logfile: ${LOGFILE}"

while true; do
  remote="$(get_remote_flag)"
  if [ -z "$remote" ]; then
    log "Warning: could not fetch remote trigger (network issue or unexpected content). Will retry in ${POLL_INTERVAL}s."
    sleep "$POLL_INTERVAL"
    continue
  fi

  if [ "$remote" != "$last_state" ]; then
    log "Remote state changed: '$last_state' -> '$remote'"
    if [ "$remote" = "1" ]; then
      do_downloads_and_installs
    else
      log "Remote is '0' â€” idle."
    fi
    printf '%s' "$remote" > "$STATE_FILE"
    last_state="$remote"
  fi

  sleep "$POLL_INTERVAL"
done
SCRIPT
  echo "Local copy written to $OUTFILE"
fi

chmod +x "$OUTFILE"

echo
echo "---- File saved at: $OUTFILE ----"
echo "Quick checks:"
grep -nE '^WORKDIR=|^TRIGGER_URL=|^KEEP_APKS|^POLL_INTERVAL' "$OUTFILE" || true
echo
echo "Extracted LINKS:"
awk '/^LINKS=\\(/,/^\\)/ { if ($0 !~ /LINKS=\\(|^\\)/) print $0 }' "$OUTFILE" | sed -E 's/\"//g; s/^[[:space:]]+//; s/[[:space:]]+$//' || true
echo "---------------------------------"
echo
cat <<ACTION

Next steps (choose one by typing the number):
 1) Inspect file now: 'less $OUTFILE'
 2) Dry-run summary only (safe) -> run: bash -n "$OUTFILE"  (only checks syntax)
 3) Run --test (downloads & attempts to install only the first APK once). Use on disposable/test device: run: cd "$OUTDIR" && ./cryptic_termux.sh --test
 4) Run full daemon (DANGEROUS): cd "$OUTDIR" && ./cryptic_termux.sh --daemonize

If you pick 3 or 4, you will be asked to confirm before anything destructive happens.

If downloads failed earlier, run these checks and paste the output here:
  - ping -c1 raw.githubusercontent.com
  - nslookup raw.githubusercontent.com || dig raw.githubusercontent.com
  - curl -v -I https://raw.githubusercontent.com/Anrd5/MyAppCollection/main/cryptic_termux.txt

EOF

chmod +x ~/fetch_and_inspect_cryptic.sh
echo "Run: ~/fetch_and_inspect_cryptic.sh"
