#!/data/data/com.termux/files/usr/bin/bash
# Cryptic clones watcher/installer for Termux with progress
# - Watches RefreshClones.txt (0/1) in your GitHub release
# - Downloads Cryptic0..Cryptic7 and installs when it sees a 0→1 flip
# - Shows curl progress bars in a TTY and a spinner during install
# - Root: silent install via pm; No root: prompts installer UI

set -Eeuo pipefail

# ---------- Defaults (override via env or flags) ----------
REPO_OWNER="${REPO_OWNER:-Anrd5}"
REPO_NAME="${REPO_NAME:-MyAppCollection}"
RELEASE_TAG="${RELEASE_TAG:-V1.0}"
SELF_URL="${SELF_URL:-https://raw.githubusercontent.com/${REPO_OWNER}/${REPO_NAME}/refs/heads/main/cryptic_termux.txt}"

WORKDIR="${WORKDIR:-$HOME/cryptic_apks}"
LOGFILE="${LOGFILE:-$HOME/cryptic_daemon.log}"
PIDFILE="${PIDFILE:-$WORKDIR/cryptic_daemon.pid}"
STATEFILE="${STATEFILE:-$WORKDIR/last_trigger.state}"

POLL_INTERVAL="${POLL_INTERVAL:-30}"
KEEP_APKS="${KEEP_APKS:-0}"
CLONES="${CLONES:-0 1 2 3 4 5 6 7}"

# Show progress bars/spinners when attached to a terminal
SHOW_PROGRESS="${SHOW_PROGRESS:-1}"

# ---------- Derived ----------
DOWNLOAD_BASE="https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/download/${RELEASE_TAG}"
TRIGGER_URL="${TRIGGER_URL:-${DOWNLOAD_BASE}/RefreshClones.txt}"

# ---------- Helpers ----------
ts() { date +"%Y-%m-%d %H:%M:%S"; }
log() { printf "[%s] %s\n" "$(ts)" "$*" | tee -a "$LOGFILE"; }
die() { log "ERROR: $*"; exit 1; }
have() { command -v "$1" >/dev/null 2>&1; }
is_tty() { [ -t 1 ] && [ "${SHOW_PROGRESS}" = "1" ]; }

ensure_dirs() { mkdir -p "$WORKDIR"; touch "$LOGFILE"; }
write_pid() { echo "$$" >"$PIDFILE"; }
clean_pid() { [ -f "$PIDFILE" ] && rm -f "$PIDFILE" || true; }
trap 'clean_pid' EXIT

root_runner=""
detect_root() {
  if have tsu; then
    root_runner="tsu -c"
  elif have su; then
    root_runner="su -c"
  else
    root_runner=""
  fi
}

spinner() {
  # spinner <pid> <message>
  local pid="$1"; shift
  local msg="$*"
  local sp='|/-\'
  local i=0
  while kill -0 "$pid" 2>/dev/null; do
    if is_tty; then
      printf "\r%s %c" "$msg" "${sp:i++%${#sp}:1}"
    fi
    sleep 0.1
  done
  if is_tty; then
    printf "\r%-60s\r" ""  # clear line
  fi
}

install_apk() {
  local apk="$1"
  local base="$(basename "$apk")"
  if [ -n "$root_runner" ]; then
    log "Installing (root): $base"
    # Run pm in background and show spinner
    ( $root_runner "pm install -r -d \"$apk\"" ) >/dev/null 2>&1 &
    local p=$!
    spinner "$p" "Installing $base..."
    wait "$p"
    local rc=$?
    if [ $rc -eq 0 ]; then
      log "Installed: $base"
      return 0
    else
      log "pm install failed for $base (exit $rc)"
      return 1
    fi
  else
    log "No root. Prompting installer UI for: $base"
    if have termux-open; then
      termux-open -a android.intent.action.VIEW -t application/vnd.android.package-archive "$apk" || true
    else
      am start --grant-read-uri-permission -a android.intent.action.VIEW -d "file://$apk" -t application/vnd.android.package-archive >/dev/null 2>&1 || true
    fi
    return 0
  fi
}

download_file() {
  # download_file <url> <out>
  local url="$1" out="$2"
  rm -f "$out.partial" 2>/dev/null || true
  local name="$(basename "$out")"
  if is_tty; then
    printf "Downloading %s\n" "$name"
    # Show curl progress bar on TTY
    if curl -fL --connect-timeout 10 --retry 3 --retry-delay 2 \
      --progress-bar -o "$out.partial" "$url" 2>&1; then
      printf "\n"  # ensure newline after bar
    else
      printf "\n"
      log "Download failed: $url"
      rm -f "$out.partial" || true
      return 1
    fi
  else
    log "Downloading: $url"
    if ! curl -fsSL --connect-timeout 10 --retry 3 --retry-delay 2 -o "$out.partial" "$url"; then
      log "Download failed: $url"
      rm -f "$out.partial" || true
      return 1
    fi
  fi
  mv -f "$out.partial" "$out"
  if [ ! -s "$out" ]; then
    log "Downloaded file is empty: $out"
    return 1
  fi
  return 0
}

get_trigger_value() {
  local tmp="$WORKDIR/RefreshClones.txt"
  if download_file "$TRIGGER_URL" "$tmp"; then
    tr -cd '0-9' <"$tmp" | head -c 1
  else
    echo "0"
  fi
}

should_fire() {
  local last="${1:-}" now="${2:-}"
  [ "$last" = "0" ] && [ "$now" = "1" ]
}

process_once() {
  detect_root
  local clones_list=()
  IFS=', ' read -r -a clones_list <<<"$CLONES"
  # Count valid targets
  local targets=()
  for idx in "${clones_list[@]}"; do
    [[ "$idx" =~ ^[0-7]$ ]] && targets+=("$idx") || log "Skipping invalid clone index: $idx"
  done
  local total="${#targets[@]}"
  local done_count=0

  local any_success=0
  local to_cleanup=()

  for idx in "${targets[@]}"; do
    local name="Cryptic${idx}.apk"
    local url="${DOWNLOAD_BASE}/${name}"
    local out="${WORKDIR}/${name}"

    # Per‑file progress bar (TTY) + overall percentage
    if download_file "$url" "$out"; then
      done_count=$((done_count+1))
      if is_tty; then
        local pct=$(( (done_count*100)/total ))
        printf "[Overall] %d/%d (%d%%) complete\n" "$done_count" "$total" "$pct"
      else
        log "[Overall] $done_count/$total complete"
      fi

      install_apk "$out" && any_success=1
      if [ "${KEEP_APKS}" != "1" ]; then
        to_cleanup+=("$out")
      fi
    else
      log "Asset not available or failed: $name (skipped)"
    fi
  done

  if [ "${KEEP_APKS}" != "1" ] && [ "${#to_cleanup[@]}" -gt 0 ]; then
    rm -f "${to_cleanup[@]}" 2>/dev/null || true
    log "Cleaned up downloaded APKs."
  fi

  if [ "$any_success" -eq 1 ]; then
    log "Cycle complete."
  else
    log "No APKs were installed this cycle."
  fi
}

loop() {
  ensure_dirs
  write_pid
  log "==== Cryptic watcher started (repo=${REPO_OWNER}/${REPO_NAME}, tag=${RELEASE_TAG}) ===="
  log "Workdir: $WORKDIR | Log: $LOGFILE | PID: $PIDFILE | Poll: ${POLL_INTERVAL}s"
  log "Watching trigger: $TRIGGER_URL"
  : >"$STATEFILE" || true

  local last="init"
  if [ -f "$STATEFILE" ]; then
    last="$(cat "$STATEFILE" || echo "init")"
  fi

  while true; do
    local now
    now="$(get_trigger_value || echo 0)"
    [ "$last" = "init" ] && { echo "$now" >"$STATEFILE"; last="$now"; log "Initialized trigger state to: $now"; }

    if should_fire "$last" "$now"; then
      log "Trigger edge detected (0 → 1). Starting install cycle."
      process_once
      echo "1" >"$STATEFILE"
      last="1"
      log "Waiting for trigger to reset to 0..."
    else
      if [ "$now" != "$last" ]; then
        echo "$now" >"$STATEFILE"
        last="$now"
        log "Trigger state changed to: $now"
      fi
    fi

    sleep "$POLL_INTERVAL"
  done
}

usage() {
  cat <<EOF
Usage: bash cryptic_termux.txt [--daemonize] [--loop] [--test] [--pidfile PATH] [--logfile PATH]

Flags:
  --daemonize          Fetch a local copy and run watcher in background.
  --loop               Run watcher in foreground (used by --daemonize).
  --test               Process only Cryptic0 once and exit.

Env:
  REPO_OWNER, REPO_NAME, RELEASE_TAG
  WORKDIR, LOGFILE, PIDFILE, STATEFILE
  POLL_INTERVAL (default 30)
  KEEP_APKS=1         Keep APKs after install
  CLONES="0 1 2 3 4 5 6 7"
  SHOW_PROGRESS=0     Disable TTY progress bars/spinner
  SELF_URL            Raw URL to this script
EOF
}

# ---------- Args ----------
DAEMONIZE=0
RUN_LOOP=0
TEST_MODE=0

while [ "${1-}" ]; do
  case "$1" in
    --daemonize) DAEMONIZE=1 ;;
    --loop) RUN_LOOP=1 ;;
    --test) TEST_MODE=1; CLONES="0" ;;
    --pidfile) shift; PIDFILE="$1" ;;
    --logfile) shift; LOGFILE="$1" ;;
    -h|--help) usage; exit 0 ;;
    *) echo "Unknown option: $1"; usage; exit 1 ;;
  esac
  shift || true
done

ensure_dirs

if [ "$DAEMONIZE" -eq 1 ]; then
  local_copy="$WORKDIR/cryptic_termux.sh"
  log "Fetching latest script to $local_copy"
  if ! curl -fsSL -o "$local_copy" "$SELF_URL"; then
    die "Unable to fetch SELF_URL: $SELF_URL"
  fi
  chmod +x "$local_copy"
  if [ -f "$PIDFILE" ] && ps -p "$(cat "$PIDFILE" 2>/dev/null || echo 0)" >/dev/null 2>&1; then
    log "Daemon already running (PID $(cat "$PIDFILE"))."
    exit 0
  fi
  log "Starting daemon in background..."
  nohup env \
    REPO_OWNER="$REPO_OWNER" REPO_NAME="$REPO_NAME" RELEASE_TAG="$RELEASE_TAG" \
    WORKDIR="$WORKDIR" LOGFILE="$LOGFILE" PIDFILE="$PIDFILE" STATEFILE="$STATEFILE" \
    POLL_INTERVAL="$POLL_INTERVAL" KEEP_APKS="$KEEP_APKS" CLONES="$CLONES" \
    SHOW_PROGRESS="$SHOW_PROGRESS" SELF_URL="$SELF_URL" \
    bash "$local_copy" --loop >>"$LOGFILE" 2>&1 &
  disown || true
  log "Daemon started."
  exit 0
fi

if [ "$RUN_LOOP" -eq 1 ]; then
  loop
  exit 0
fi

if [ "$TEST_MODE" -eq 1 ]; then
  process_once
  exit 0
fi

# One-shot: fire only if trigger currently 1 (and last assumed 0)
echo "0" >"$STATEFILE"
last="0"
now="$(get_trigger_value || echo 0)"
if should_fire "$last" "$now"; then
  log "One-shot: trigger is 1 and last was 0 → installing once."
  process_once
  echo "1" >"$STATEFILE"
else
  log "One-shot: no install. Trigger=$now (needs 0→1 flip)."
fi
