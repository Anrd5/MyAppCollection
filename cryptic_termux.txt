#!/usr/bin/env bash
# install_cryptics_daemon_no_root.sh
# Variant of original installer designed to run WITHOUT root.
# - Downloads APKs (resume capable) and optionally attempts non-root pm installs (may fail)
# - If no root is available, it preserves APKs for manual install and logs clear instructions
# - Supports: KEEP_APKS, POLL_INTERVAL, TRIGGER_URL, --test, --daemonize, --pidfile, --logfile
set -u

# ----------------- Configuration (can be overridden with env vars) -----------------
# WORKDIR will be auto-chosen if not set: prefer writable /sdcard, then /data/local/tmp, then $HOME
WORKDIR="${WORKDIR:-}"
KEEP_APKS="${KEEP_APKS:-0}"
POLL_INTERVAL="${POLL_INTERVAL:-30}"
TRIGGER_URL="${TRIGGER_URL:-https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/RefreshClones.txt}"

# We'll fill STATE_FILE/PIDFILE/LOGFILE after WORKDIR chosen

# ----------------- The APK links (unchanged) -----------------
LINKS=(
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.0.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.1.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.2.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.3.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.4.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.5.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.6.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.7.apk"
)

# ----------------- CLI parsing -----------------
DAEMONIZE=0
TEST_MODE=0
PIDFILE=""
LOGFILE=""

usage() {
  cat <<EOF
Usage: $0 [OPTIONS]

Options:
  --daemonize           Run as background daemon (uses nohup/setsid, writes PID & log)
  --pidfile <path>      Specify PID file (default: <WORKDIR>/cryptic_daemon.pid)
  --logfile <path>      Specify logfile (default: <HOME>/cryptic_daemon.log)
  --test                Test mode: download (and try install if root) only the first APK once, then exit
  --help                Show this help and exit

Environment variables:
  WORKDIR, KEEP_APKS, POLL_INTERVAL, TRIGGER_URL

Examples:
  $0 --test
  $0 --daemonize
  WORKDIR=/sdcard/cryptic_apks ./install_cryptics_daemon_no_root.sh --test
EOF
}

# Simple args loop
i=1
while [ $i -le $# ]; do
  arg="${!i}"
  case "$arg" in
    --daemonize) DAEMONIZE=1 ;;
    --pidfile) i=$((i+1)); PIDFILE="${!i:-}";;
    --logfile) i=$((i+1)); LOGFILE="${!i:-}";;
    --test) TEST_MODE=1 ;;
    --help|-h) usage; exit 0 ;;
    *) echo "Unknown option: $arg"; usage; exit 1 ;;
  esac
  i=$((i+1))
done

# ----------------- Choose a writable WORKDIR when not provided -----------------
if [ -z "${WORKDIR:-}" ]; then
  if [ -d /sdcard ] && touch /sdcard/.writable_test 2>/dev/null; then
    WORKDIR="/sdcard/cryptic_apks"
    rm -f /sdcard/.writable_test 2>/dev/null || true
  elif [ -d /data/local/tmp ] && touch /data/local/tmp/.writable_test 2>/dev/null; then
    WORKDIR="/data/local/tmp/cryptic_apks"
    rm -f /data/local/tmp/.writable_test 2>/dev/null || true
  else
    WORKDIR="${HOME}/cryptic_apks"
  fi
fi

STATE_FILE="${WORKDIR}/.last_refresh_state"
PIDFILE_DEFAULT="${WORKDIR}/cryptic_daemon.pid"
LOGFILE_DEFAULT="${HOME}/cryptic_daemon.log"

PIDFILE="${PIDFILE:-$PIDFILE_DEFAULT}"
LOGFILE="${LOGFILE:-$LOGFILE_DEFAULT}"

# ----------------- Helpers -----------------
mkdir -p "$WORKDIR"
cd "$WORKDIR" || { echo "ERROR: cannot cd to $WORKDIR"; exit 1; }

log() { printf '[%s] %s\n' "$(date --iso-8601=seconds 2>/dev/null || date)" "$*"; }

# ----------------- Daemonize fallback: use setsid if nohup missing -----------------

if [ "$DAEMONIZE" = 1 ]; then
  # If already running, exit
  if [ -f "$PIDFILE" ]; then
    oldpid="$(cat "$PIDFILE" 2>/dev/null || true)"
    if [ -n "$oldpid" ] && kill -0 "$oldpid" 2>/dev/null; then
      echo "Daemon already running (PID $oldpid). Exiting."
      exit 0
    else
      rm -f "$PIDFILE" 2>/dev/null || true
    fi
  fi
  mkdir -p "$(dirname "$LOGFILE")" 2>/dev/null || true
  if command -v nohup >/dev/null 2>&1; then
    nohup "$0" --pidfile "$PIDFILE" --logfile "$LOGFILE" > "$LOGFILE" 2>&1 &
    childpid=$!
  elif command -v setsid >/dev/null 2>&1; then
    setsid "$0" --pidfile "$PIDFILE" --logfile "$LOGFILE" > "$LOGFILE" 2>&1 &
    childpid=$!
  else
    # last resort: simple background
    "$0" --pidfile "$PIDFILE" --logfile "$LOGFILE" > "$LOGFILE" 2>&1 &
    childpid=$!
  fi
  echo "$childpid" > "$PIDFILE"
  echo "Started daemon (PID $childpid). Log: $LOGFILE  PID: $PIDFILE"
  exit 0
fi

# If running (foreground/child) write PID file
printf '%s' "$$" > "$PIDFILE" 2>/dev/null || true
trap 'if [ -f "$PIDFILE" ] && [ "$(cat "$PIDFILE" 2>/dev/null)" = "$$" ]; then rm -f "$PIDFILE"; fi; log "Exiting"; exit 0' SIGINT SIGTERM EXIT

# ----------------- Downloader selection (no auto package installs) -----------------
DL_TOOL=""
if command -v wget >/dev/null 2>&1; then
  DL_TOOL="wget"
elif command -v curl >/dev/null 2>&1; then
  DL_TOOL="curl"
else
  log "ERROR: No wget/curl found. Please install wget or curl in the VM image and re-run."
  exit 1
fi
log "Using downloader: $DL_TOOL"

# ----------------- Root detection (non-fatal) -----------------
ROOT_AVAILABLE=0
ROOT_CMD=""
if command -v tsu >/dev/null 2>&1; then
  ROOT_CMD="tsu --"
  ROOT_AVAILABLE=1
elif command -v su >/dev/null 2>&1; then
  ROOT_CMD="su -c"
  ROOT_AVAILABLE=1
else
  ROOT_AVAILABLE=0
fi
if [ "$ROOT_AVAILABLE" -eq 1 ]; then
  log "Root helper found: ${ROOT_CMD%% *} â€” will attempt silent installs"
else
  log "No root helper found. Script will download APKs and preserve them for manual install."
  # If not root, force KEEP_APKS=1 so we don't delete APKs after (they're needed for manual install)
  if [ "$KEEP_APKS" = "0" ]; then
    log "Forcing KEEP_APKS=1 because no root is available."
    KEEP_APKS=1
  fi
fi

# ----------------- Core functions -----------------

download_file() {
  local url="$1"
  local out="$2"
  if [ "$DL_TOOL" = "wget" ]; then
    # -c resume, -O to write filename exactly
    wget -c -O "$out" "$url"
    return $?
  else
    # curl fallback: -L follow redirects, -C - resume, -o output
    curl -L -C - -o "$out" "$url"
    return $?
  fi
}

install_apk() {
  local apk_path="$1"
  # If we have root helper, perform silent install
  if [ "$ROOT_AVAILABLE" -eq 1 ]; then
    if command -v tsu >/dev/null 2>&1; then
      tsu pm install -r -g "$apk_path"
      return $?
    else
      su -c "pm install -r -g '$apk_path'"
      return $?
    fi
  fi

  # No root: try non-root pm (this usually fails on modern Android), return codes:
  # 0 = success, 1 = pm returned nonzero, 2 = pm not available
  if command -v pm >/dev/null 2>&1; then
    pm install -r -g "$apk_path" >/dev/null 2>&1 && return 0 || return 1
  else
    return 2
  fi
}

# ----------------- Trigger fetch -----------------
get_remote_flag() {
  local content=""
  if [ "$DL_TOOL" = "wget" ]; then
    content="$(wget -qO- "$TRIGGER_URL" 2>/dev/null || true)"
  else
    content="$(curl -fsSL "$TRIGGER_URL" 2>/dev/null || true)"
  fi
  content="$(printf '%s' "$content" | tr -d ' \t\r\n' | cut -c1 || true)"
  case "$content" in
    0|1) printf '%s' "$content" ;;
    *) printf '' ;;
  esac
}

# ----------------- One run (download + optional install) -----------------
do_downloads_and_installs() {
  log "Starting downloads (workdir=$WORKDIR)"
  log "----"
  for url in "${LINKS[@]}"; do
    fname="${url##*/}"
    log "Processing: $fname"
    if [ -f "$fname" ] && [ ! -s "$fname" ]; then
      log "Removing zero-size stale file $fname"
      rm -f "$fname"
    fi

    log "Downloading from: $url"
    download_file "$url" "$fname"
    dlrc=$?
    if [ $dlrc -ne 0 ]; then
      log "Error: download failed for $fname (code $dlrc). Skipping."
      continue
    fi

    if [ ! -s "$fname" ]; then
      log "Downloaded file is empty. Skipping install for $fname."
      continue
    fi

    size_bytes=$(stat -c%s "$fname" 2>/dev/null || ls -l "$fname" | awk '{print $5}')
    log "Downloaded $fname (${size_bytes} bytes)."

    if [ "$ROOT_AVAILABLE" -eq 1 ]; then
      log "Attempting silent install of $fname"
      install_apk "$PWD/$fname"
      inst_rc=$?
      if [ $inst_rc -eq 0 ]; then
        log "Installed $fname successfully."
        if [ "$KEEP_APKS" = "0" ]; then
          log "Removing $fname to save space..."
          rm -f "$fname"
        else
          log "Keeping $fname as requested (KEEP_APKS=1)."
        fi
      else
        log "Warning: installation failed for $fname (pm install exit $inst_rc). File kept for debugging/manual install."
      fi
    else
      log "No root: skipping automatic install. APK available at: $PWD/$fname"
      log "To install, either run: pm install -r -g $PWD/$fname (as root) or pull the file via ADB and install from a host."
    fi
  done
  log "All tasks finished. Workdir: $WORKDIR"
}

# ----------------- TEST mode: one-shot first APK -----------------
if [ "$TEST_MODE" = 1 ]; then
  log "TEST MODE: only downloading (and attempting install if root) the first APK once."
  if [ ${#LINKS[@]} -gt 0 ]; then
    first="${LINKS[0]}"
    LINKS=("$first")
  fi
  do_downloads_and_installs
  exit 0
fi

# ----------------- Daemon loop: watch trigger and run on 0->1 transition -----------------
last_state=""
if [ -f "$STATE_FILE" ]; then
  last_state="$(cat "$STATE_FILE" 2>/dev/null || true)"
fi
last_state="${last_state:-}"

log "Daemon starting. Polling $TRIGGER_URL every ${POLL_INTERVAL}s. Initial last_state='$last_state'. Logfile: ${LOGFILE}"

while true; do
  remote="$(get_remote_flag)"
  if [ -z "$remote" ]; then
    log "Warning: could not fetch remote trigger (network issue or unexpected content). Will retry in ${POLL_INTERVAL}s."
    sleep "$POLL_INTERVAL"
    continue
  fi

  if [ "$remote" != "$last_state" ]; then
    log "Remote state changed: '$last_state' -> '$remote'"
    if [ "$remote" = "1" ]; then
      do_downloads_and_installs
    else
      log "Remote is '0' â€” idle."
    fi
    printf '%s' "$remote" > "$STATE_FILE"
    last_state="$remote"
  fi

  sleep "$POLL_INTERVAL"
done
