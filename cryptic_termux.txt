e
#!/data/data/com.termux/files/usr/bin/bash
# Cryptic APK auto-installer using release-based RefreshClones.txt

set -Eeuo pipefail

REPO_USER="Anrd5"
REPO_NAME="MyAppCollection"
RELEASE_TAG="V1.0"

APK_DIR="$HOME/cryptic_apks"
REF_LOCAL="$HOME/RefreshClones.txt"
REF_REMOTE="https://github.com/${REPO_USER}/${REPO_NAME}/releases/download/${RELEASE_TAG}/RefreshClones.txt"
RAW_BASE="https://raw.githubusercontent.com/${REPO_USER}/${REPO_NAME}/refs/heads/main"
LOG_FILE="$HOME/cryptic_install.log"
STATE_FILE="$HOME/.cryptic_state"
SLEEP_SECS=60

mkdir -p "$APK_DIR"

log() {
  printf '[%(%Y-%m-%d %H:%M:%S)T] %s\n' -1 "$*" | tee -a "$LOG_FILE" >&2
}

trim_num01() {
  tr -cd '01' | head -c 1 || true
}

get_ref_val() {
  local val=""
  if url_ok "$REF_REMOTE"; then
    val="$(curl -fsSL "$REF_REMOTE" | head -n1 | trim_num01)"
  fi
  : "${val:=0}"
  echo "$val"
}

get_state() {
  [ -f "$STATE_FILE" ] && head -n1 "$STATE_FILE" | trim_num01 || echo 0
}

set_state() {
  echo "$1" >"$STATE_FILE"
}

url_ok() {
  curl -sIL -o /dev/null -w '%{http_code}' "$1" | grep -q '^2'
}

discover_urls() {
  for i in $(seq 0 7); do
    u="${RAW_BASE}/Cryptic${i}.apk"
    url_ok "$u" && echo "$u"
  done
}

download_all() {
  local urls=("$@")
  local any=0
  for url in "${urls[@]}"; do
    fn="$APK_DIR/$(basename "$url")"
    log "Downloading $(basename "$url") ..."
    if curl -fL -o "$fn" "$url"; then
      log "Saved: $fn"
      any=1
    else
      log "Failed: $url"
    fi
  done
  [ "$any" -eq 1 ]
}

launch_gui_install() {
  local apk="$1"
  if command -v termux-open >/dev/null; then
    termux-open "$apk" >/dev/null || true
  else
    am start -a android.intent.action.VIEW -d "file://$apk" -t "application/vnd.android.package-archive" >/dev/null || true
  fi
}

install_all() {
  shopt -s nullglob
  for apk in "$APK_DIR"/Cryptic*.apk; do
    log "Launching installer for $(basename "$apk")"
    launch_gui_install "$apk"
    sleep 2
  done
  shopt -u nullglob
}

main_once() {
  mapfile -t urls < <(discover_urls)
  download_all "${urls[@]}" || true
  install_all || true
}

log "Cryptic watcher started (Release mode)."

while :; do
  cur_ref="$(get_ref_val)"
  prev_state="$(get_state)"

  if [ "$cur_ref" = "1" ] && [ "$prev_state" != "1" ]; then
    log "Trigger detected (0 â†’ 1). Starting install..."
    main_once
    set_state "1"
    log "Done. Flip RefreshClones.txt to 0 then 1 to repeat."
  elif [ "$cur_ref" = "0" ] && [ "$prev_state" != "0" ]; then
    set_state "0"
    log "Reset detected. Ready for next cycle."
  fi

  sleep "$SLEEP_SECS"
done
