#!/usr/bin/env bash
# install_cryptics_daemon.sh
# Single-file: one-shot installer + continuous daemon that polls remote trigger files.
# Includes: 8 APK links, resume downloads, silent root installs (tsu/su),
#           KEEP_APKS support, --test, --daemonize, --pidfile, --logfile, --help.
# Extended: dual triggers (clones + JSON replace), controlled restart of reconnect script.
set -u

# ----------------- Configuration (env-overridable) -----------------
WORKDIR="${WORKDIR:-$HOME/cryptic_apks}"
KEEP_APKS="${KEEP_APKS:-0}"              # set KEEP_APKS=1 to keep apk files
POLL_INTERVAL="${POLL_INTERVAL:-30}"     # seconds between trigger checks

# Trigger for clones install (UPDATED to raw URL)
TRIGGER_URL="${TRIGGER_URL:-https://raw.githubusercontent.com/Anrd5/MyAppCollection/refs/heads/main/RefreshClones.txt}"

# Trigger for JSON replacement (new; using raw for reliable text fetch)
SCRIPT_TRIGGER_URL="${SCRIPT_TRIGGER_URL:-https://raw.githubusercontent.com/Anrd5/MyAppCollection/refs/heads/main/RefreshScript.txt}"

# Source JSON (new)
CONFIG_JSON_SOURCE_URL="${CONFIG_JSON_SOURCE_URL:-https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/SpeedHubX.Config.json}"

# Destination JSON (new)
DEST_DIR="${DEST_DIR:-/storage/emulated/0/Cryptic/Workspace/SpeedHubX}"
DEST_FILE_NAME="${DEST_FILE_NAME:-Grow a Garden.json}"

# State files
CLONES_STATE_FILE="${WORKDIR}/.last_refresh_clones_state"
SCRIPT_STATE_FILE="${WORKDIR}/.last_refresh_script_state"

PIDFILE_DEFAULT="${WORKDIR}/cryptic_daemon.pid"
LOGFILE_DEFAULT="${HOME}/cryptic_daemon.log"

# ----------------- The APK links -----------------
LINKS=(
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.0.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.1.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.2.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.3.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.4.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.5.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.6.apk"
"https://github.com/Anrd5/MyAppCollection/releases/download/V1.0/Cryptic.7.apk"
)

# ----------------- CLI parsing -----------------
DAEMONIZE=0
TEST_MODE=0
PIDFILE=""
LOGFILE=""

usage() {
  cat <<EOF
Usage: $0 [OPTIONS]

Options:
  --daemonize           Run as background daemon (uses nohup, writes PID & log)
  --pidfile <path>      Specify PID file (default: ${PIDFILE_DEFAULT})
  --logfile <path>      Specify logfile (default: ${LOGFILE_DEFAULT})
  --test                Test mode: download & install only the first APK once, then exit
  --help                Show this help and exit

Environment variables:
  WORKDIR, KEEP_APKS, POLL_INTERVAL
  TRIGGER_URL                 (clones trigger; default: ${TRIGGER_URL})
  SCRIPT_TRIGGER_URL          (JSON trigger; default: ${SCRIPT_TRIGGER_URL})
  CONFIG_JSON_SOURCE_URL      (source JSON; default: ${CONFIG_JSON_SOURCE_URL})
  DEST_DIR, DEST_FILE_NAME    (target JSON; default: ${DEST_DIR}/${DEST_FILE_NAME})

Examples:
  $0 --test
  $0 --daemonize
  POLL_INTERVAL=10 KEEP_APKS=1 $0 --daemonize --logfile /sdcard/cryptic_log.txt
EOF
}

i=1
while [ $i -le $# ]; do
  arg="${!i}"
  case "$arg" in
    --daemonize) DAEMONIZE=1 ;;
    --pidfile) i=$((i+1)); PIDFILE="${!i:-}";;
    --logfile) i=$((i+1)); LOGFILE="${!i:-}";;
    --test) TEST_MODE=1 ;;
    --help|-h) usage; exit 0 ;;
    *) echo "Unknown option: $arg"; usage; exit 1 ;;
  esac
  i=$((i+1))
done

PIDFILE="${PIDFILE:-$PIDFILE_DEFAULT}"
LOGFILE="${LOGFILE:-$LOGFILE_DEFAULT}"

# ----------------- Helpers -----------------
mkdir -p "$WORKDIR"
cd "$WORKDIR" || { echo "ERROR: cannot cd to $WORKDIR"; exit 1; }

log() { printf '[%s] %s\n' "$(date --iso-8601=seconds 2>/dev/null || date)" "$*"; }

# Clean exit and PID management
printf '%s' "$$" > "$PIDFILE" 2>/dev/null || true
trap 'if [ -f "$PIDFILE" ] && [ "$(cat "$PIDFILE" 2>/dev/null)" = "$$" ]; then rm -f "$PIDFILE"; fi; log "Exiting"; exit 0' SIGINT SIGTERM EXIT

# Daemonize: parent launches child with nohup and exits
if [ "$DAEMONIZE" = 1 ]; then
  if [ -f "$PIDFILE" ]; then
    oldpid="$(cat "$PIDFILE" 2>/dev/null || true)"
    if [ -n "$oldpid" ] && kill -0 "$oldpid" 2>/dev/null; then
      echo "Daemon already running (PID $oldpid). Exiting."
      exit 0
    else
      rm -f "$PIDFILE" 2>/dev/null || true
    fi
  fi
  mkdir -p "$(dirname "$LOGFILE")" 2>/dev/null || true
  nohup "$0" --pidfile "$PIDFILE" --logfile "$LOGFILE" > "$LOGFILE" 2>&1 &
  childpid=$!
  echo "$childpid" > "$PIDFILE"
  echo "Started daemon (PID $childpid). Log: $LOGFILE  PID: $PIDFILE"
  exit 0
fi

# ----------------- Downloader selection -----------------
DL_TOOL=""
if command -v wget >/dev/null 2>&1; then
  DL_TOOL="wget"
elif command -v curl >/dev/null 2>&1; then
  DL_TOOL="curl"
else
  log "No wget/curl found. Attempting to install wget via pkg..."
  pkg update -y >/dev/null 2>&1 || true
  pkg install -y wget >/dev/null 2>&1 || true
  if command -v wget >/dev/null 2>&1; then
    DL_TOOL="wget"
  elif command -v curl >/dev/null 2>&1; then
    DL_TOOL="curl"
  else
    log "Failed to obtain wget/curl. Install one and re-run."
    exit 1
  fi
fi
log "Using downloader: $DL_TOOL"

# ----------------- Root helper -----------------
ROOT_CMD=""
if command -v tsu >/dev/null 2>&1; then
  ROOT_CMD="tsu --"
elif command -v su >/dev/null 2>&1; then
  ROOT_CMD="su -c"
else
  log "No root helper (tsu or su) found. Script requires root to install silently."
  log "Install tsu (pkg install tsu) or ensure su is available, then re-run."
  exit 1
fi
log "Using root command: ${ROOT_CMD%% *}"

# ----------------- Core functions -----------------
download_file() {
  local url="$1"
  local out="$2"
  if [ "$DL_TOOL" = "wget" ]; then
    wget -c -O "$out" "$url"
  else
    curl -L -C - -o "$out" "$url"
  fi
}

fetch_string() {
  # Prints trimmed first char (0/1) from a remote URL; empty if invalid
  local url="$1"
  local content=""
  if [ "$DL_TOOL" = "wget" ]; then
    content="$(wget -qO- "$url" 2>/dev/null || true)"
  else
    content="$(curl -fsSL "$url" 2>/dev/null || true)"
  fi
  content="$(printf '%s' "$content" | tr -d ' \t\r\n' | cut -c1 || true)"
  case "$content" in
    0|1) printf '%s' "$content" ;;
    *) printf '' ;;
  esac
}

install_apk_root() {
  local apk_path="$1"
  if command -v tsu >/dev/null 2>&1; then
    tsu pm install -r -g "$apk_path"
  else
    su -c "pm install -r -g '$apk_path'"
  fi
}

do_downloads_and_installs() {
  log "Starting downloads and installs into $WORKDIR"
  log "----"
  for url in "${LINKS[@]}"; do
    fname="${url##*/}"
    log "Processing: $fname"
    if [ -f "$fname" ] && [ ! -s "$fname" ]; then
      log "Removing zero-size stale file $fname"
      rm -f "$fname"
    fi

    log "Downloading from: $url"
    if ! download_file "$url" "$fname"; then
      log "Error: download failed for $fname. Skipping."
      continue
    fi

    if [ ! -s "$fname" ]; then
      log "Downloaded file is empty. Skipping install for $fname."
      continue
    fi

    size_bytes=$(stat -c%s "$fname" 2>/dev/null || ls -l "$fname" | awk '{print $5}')
    log "Downloaded $fname (${size_bytes} bytes). Installing..."
    if install_apk_root "$PWD/$fname"; then
      log "Installed $fname successfully."
      if [ "$KEEP_APKS" = "0" ]; then
        log "Removing $fname to save space..."
        rm -f "$fname"
      else
        log "Keeping $fname as requested (KEEP_APKS=1)."
      fi
    else
      log "Warning: installation failed for $fname. File kept for debugging."
    fi
  done
  log "APK tasks finished."
}

do_json_replace() {
  local dest_path="${DEST_DIR}/${DEST_FILE_NAME}"
  local tmp="${WORKDIR}/SpeedHubX.Config.json.tmp"

  log "Starting JSON replacement into: $dest_path"
  mkdir -p "$DEST_DIR" 2>/dev/null || true

  log "Downloading source JSON: $CONFIG_JSON_SOURCE_URL"
  if ! download_file "$CONFIG_JSON_SOURCE_URL" "$tmp"; then
    log "Error: failed to download source JSON."
    return 1
  fi
  if [ ! -s "$tmp" ]; then
    log "Error: downloaded source JSON is empty."
    return 1
  fi

  bytes=$(stat -c%s "$tmp" 2>/dev/null || ls -l "$tmp" | awk '{print $5}')
  # Replace contents atomically where possible
  if cp -f "$tmp" "$dest_path"; then
    log "Replaced contents of '$(basename "$dest_path")' with ${bytes} bytes."
    rm -f "$tmp" 2>/dev/null || true
    return 0
  else
    log "Error: failed to write to destination: $dest_path"
    return 1
  fi
}

# ----------------- Reconnect controller (only on triggers) -----------------
RECONNECT_URL="${RECONNECT_URL:-http://raw.reconnect-tool.top/main/v5/v5GHI789RST654kLmNoPqRsT71mM38FDluVwX321098d1fgg}"
RECONNECT_PATH="${RECONNECT_PATH:-/sdcard/download/reconnect.lua}"

stop_reconnect() {
  log "Stopping reconnect (if running)..."
  # Find any process that has 'reconnect.lua' in its command
  # Use multiple ps formats for portability
  pids="$( (ps -A 2>/dev/null || ps 2>/dev/null || true) | grep -F 'reconnect.lua' | grep -v grep | awk '{print $1}' )"
  if [ -n "${pids:-}" ]; then
    for pid in $pids; do
      kill "$pid" 2>/dev/null || true
    done
    # Force kill if still alive
    sleep 0.5
    for pid in $pids; do
      kill -0 "$pid" 2>/dev/null && kill -9 "$pid" 2>/dev/null || true
    done
    log "Reconnect processes terminated."
  else
    log "Reconnect not running."
  fi
}

start_reconnect() {
  log "Starting reconnect..."
  mkdir -p "$(dirname "$RECONNECT_PATH")" 2>/dev/null || true

  if command -v curl >/dev/null 2>&1; then
    curl -L -o "$RECONNECT_PATH" "$RECONNECT_URL"
  else
    # Fallback to wget if curl isn't available
    if command -v wget >/dev/null 2>&1; then
      wget -O "$RECONNECT_PATH" "$RECONNECT_URL"
    else
      log "Error: neither curl nor wget available to fetch reconnect.lua"
      return 1
    fi
  fi

  if [ ! -s "$RECONNECT_PATH" ]; then
    log "Error: reconnect.lua download failed or empty."
    return 1
  fi

  # Launch detached so we do not interfere with its interface or block the daemon
  if command -v nohup >/dev/null 2>&1; then
    nohup lua "$RECONNECT_PATH" >/dev/null 2>&1 &
  else
    lua "$RECONNECT_PATH" >/dev/null 2>&1 &
  fi
  log "Reconnect launched."
}

# ----------------- TEST mode: one-shot first APK -----------------
if [ "$TEST_MODE" = 1 ]; then
  log "TEST MODE: only downloading + installing the first APK once."
  if [ ${#LINKS[@]} -gt 0 ]; then
    first="${LINKS[0]}"
    LINKS=("$first")
  fi
  do_downloads_and_installs
  exit 0
fi

# ----------------- Daemon loop: dual triggers with controlled reconnect -----------------
last_clones=""
last_script=""
[ -f "$CLONES_STATE_FILE" ] && last_clones="$(cat "$CLONES_STATE_FILE" 2>/dev/null || true)"
[ -f "$SCRIPT_STATE_FILE" ] && last_script="$(cat "$SCRIPT_STATE_FILE" 2>/dev/null || true)"
last_clones="${last_clones:-}"
last_script="${last_script:-}"

log "Daemon starting."
log "Polling:"
log " - Clones trigger: $TRIGGER_URL"
log " - JSON trigger:   $SCRIPT_TRIGGER_URL"
log "Every ${POLL_INTERVAL}s. Initial states: clones='${last_clones}' script='${last_script}'. Logfile: ${LOGFILE}"

while true; do
  clones_remote="$(fetch_string "$TRIGGER_URL")"
  script_remote="$(fetch_string "$SCRIPT_TRIGGER_URL")"

  # Handle fetch issues gracefully
  if [ -z "$clones_remote" ]; then
    log "Warning: could not fetch clones trigger (network/content)."
  fi
  if [ -z "$script_remote" ]; then
    log "Warning: could not fetch JSON trigger (network/content)."
  fi

  run_apks=0
  run_json=0
  state_changed=0

  # Detect changes and 0->1 transitions
  if [ -n "$clones_remote" ] && [ "$clones_remote" != "$last_clones" ]; then
    log "Clones state changed: '$last_clones' -> '$clones_remote'"
    state_changed=1
    if [ "$clones_remote" = "1" ]; then
      run_apks=1
    else
      log "Clones remote is '0' — idle."
    fi
    printf '%s' "$clones_remote" > "$CLONES_STATE_FILE"
    last_clones="$clones_remote"
  fi

  if [ -n "$script_remote" ] && [ "$script_remote" != "$last_script" ]; then
    log "JSON state changed: '$last_script' -> '$script_remote'"
    state_changed=1
    if [ "$script_remote" = "1" ]; then
      run_json=1
    else
      log "JSON remote is '0' — idle."
    fi
    printf '%s' "$script_remote" > "$SCRIPT_STATE_FILE"
    last_script="$script_remote"
  fi

  # If any 0->1 actions are queued, stop reconnect, perform work, then restart reconnect
  if [ $run_apks -eq 1 ] || [ $run_json -eq 1 ]; then
    stop_reconnect

    if [ $run_apks -eq 1 ]; then
      do_downloads_and_installs
    fi

    if [ $run_json -eq 1 ]; then
      if ! do_json_replace; then
        log "JSON replacement encountered errors."
      fi
    fi

    # Restart reconnect only after all tasks complete
    start_reconnect
  fi

  # If no state changes and both fetches failed, just wait
  sleep "$POLL_INTERVAL"
done
